<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [ATK_H7R7_Boot\ATK_H7R7_Boot.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ATK_H7R7_Boot\ATK_H7R7_Boot.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Thu May 22 10:06:09 2025
<BR><P>
<H3>Maximum Stack Usage =        400 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Boot_JumpToApp &rArr; printf_tx1 &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[27]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[27]">ADC1_2_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[7a]">ADF1_FLT0_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32h7rsxx_it.o(.text.BusFault_Handler) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[7d]">CEC_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[5e]">CORDIC_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[7b]">CRS_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[60]">DCMIPP_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[63]">DMA2D_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[b]">DTS_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32h7rsxx_it.o(.text.DebugMon_Handler) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[5d]">ETH_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[1d]">EXTI10_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[1e]">EXTI11_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[1f]">EXTI12_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[20]">EXTI13_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[21]">EXTI14_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[22]">EXTI15_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[18]">EXTI5_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[19]">EXTI6_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[1a]">EXTI7_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[1b]">EXTI8_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[1c]">EXTI9_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[94]">FDCAN1_IT0_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[95]">FDCAN1_IT1_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[96]">FDCAN2_IT0_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[97]">FDCAN2_IT1_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[69]">FMC_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[11]">FPU_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[65]">GFXMMU_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[5f]">GFXTIM_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[28]">GPDMA1_Channel0_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[83]">GPDMA1_Channel10_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[84]">GPDMA1_Channel11_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[85]">GPDMA1_Channel12_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[86]">GPDMA1_Channel13_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[87]">GPDMA1_Channel14_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[88]">GPDMA1_Channel15_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[29]">GPDMA1_Channel1_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[2a]">GPDMA1_Channel2_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[2b]">GPDMA1_Channel3_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[2c]">GPDMA1_Channel4_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[2d]">GPDMA1_Channel5_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[2e]">GPDMA1_Channel6_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[2f]">GPDMA1_Channel7_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[81]">GPDMA1_Channel8_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[82]">GPDMA1_Channel9_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[92]">GPU2D_ER_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[91]">GPU2D_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[25]">HASH_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[41]">HPDMA1_Channel0_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[8b]">HPDMA1_Channel10_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[8c]">HPDMA1_Channel11_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[8d]">HPDMA1_Channel12_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[8e]">HPDMA1_Channel13_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[8f]">HPDMA1_Channel14_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[90]">HPDMA1_Channel15_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[42]">HPDMA1_Channel1_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[43]">HPDMA1_Channel2_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[44]">HPDMA1_Channel3_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[45]">HPDMA1_Channel4_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[46]">HPDMA1_Channel5_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[47]">HPDMA1_Channel6_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[48]">HPDMA1_Channel7_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[89]">HPDMA1_Channel8_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[8a]">HPDMA1_Channel9_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32h7rsxx_it.o(.text.HardFault_Handler) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[4e]">I2C1_ER_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[4d]">I2C1_EV_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[50]">I2C2_ER_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[4f]">I2C2_EV_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[52]">I2C3_ER_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[51]">I2C3_EV_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[5b]">I3C1_ER_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[5a]">I3C1_EV_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[66]">I3C1_WKUP_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[93]">ICACHE_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[c]">IWDG_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[64]">JPEG_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[73]">LPTIM1_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[74]">LPTIM2_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[75]">LPTIM3_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[76]">LPTIM4_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[77]">LPTIM5_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[7f]">LPUART1_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[62]">LTDC_ER_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[61]">LTDC_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[79]">MDIOS_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32h7rsxx_it.o(.text.MemManage_Handler) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32h7rsxx_it.o(.text.NMI_Handler) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[6c]">OTG_FS_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[5c]">OTG_HS_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[24]">PKA_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[7e]">PSSI_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[a]">PVD_PVM_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32h7rsxx_it.o(.text.PendSV_Handler) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[10]">RAMECC_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[e]">RCC_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[26]">RNG_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[23]">RTC_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[49]">SAI1_A_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[4a]">SAI1_B_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[4b]">SAI2_A_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[4c]">SAI2_B_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[6a]">SDMMC1_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[6b]">SDMMC2_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[78]">SPDIF_RX_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[3b]">SPI1_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[3c]">SPI2_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[3e]">SPI4_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[3f]">SPI5_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[40]">SPI6_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32h7rsxx_it.o(.text.SVC_Handler) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32h7rsxx_it.o(.text.SysTick_Handler) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[98]">SystemInit</a> from system_stm32h7rsxx.o(.text.SystemInit) referenced from startup_stm32h7r7xx.o(.text)
 <LI><a href="#[12]">TAMP_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[6d]">TIM12_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[6e]">TIM13_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[6f]">TIM14_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[70]">TIM15_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[71]">TIM16_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[72]">TIM17_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[30]">TIM1_BRK_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[33]">TIM1_CC_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[32]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[31]">TIM1_UP_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[34]">TIM2_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[35]">TIM3_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[36]">TIM4_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[37]">TIM5_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[38]">TIM6_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[39]">TIM7_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[3a]">TIM9_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[56]">UART4_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[57]">UART5_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[58]">UART7_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[59]">UART8_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[7c]">UCPD1_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[53]">USART1_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[54]">USART2_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[55]">USART3_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32h7rsxx_it.o(.text.UsageFault_Handler) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[80]">WAKEUP_PIN_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[67]">XSPI1_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[68]">XSPI2_IRQHandler</a> from startup_stm32h7r7xx.o(.text) referenced from startup_stm32h7r7xx.o(RESET)
 <LI><a href="#[99]">__main</a> from __main.o(!!!main) referenced from startup_stm32h7r7xx.o(.text)
 <LI><a href="#[9c]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[9b]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[9a]">_snputc</a> from _snputc.o(.text) referenced from vsnprintf.o(.text)
 <LI><a href="#[9f]">w25q128_dual_erase_block</a> from norflash_w25q128.o(.text.w25q128_dual_erase_block) referenced from norflash_w25q128.o(.rodata.norflash_w25q128_dual)
 <LI><a href="#[9e]">w25q128_dual_erase_chip</a> from norflash_w25q128.o(.text.w25q128_dual_erase_chip) referenced from norflash_w25q128.o(.rodata.norflash_w25q128_dual)
 <LI><a href="#[a0]">w25q128_dual_erase_sector</a> from norflash_w25q128.o(.text.w25q128_dual_erase_sector) referenced from norflash_w25q128.o(.rodata.norflash_w25q128_dual)
 <LI><a href="#[9d]">w25q128_dual_init</a> from norflash_w25q128.o(.text.w25q128_dual_init) referenced from norflash_w25q128.o(.rodata.norflash_w25q128_dual)
 <LI><a href="#[a3]">w25q128_dual_memory_mapped</a> from norflash_w25q128.o(.text.w25q128_dual_memory_mapped) referenced from norflash_w25q128.o(.rodata.norflash_w25q128_dual)
 <LI><a href="#[a1]">w25q128_dual_program_page</a> from norflash_w25q128.o(.text.w25q128_dual_program_page) referenced from norflash_w25q128.o(.rodata.norflash_w25q128_dual)
 <LI><a href="#[a2]">w25q128_dual_read</a> from norflash_w25q128.o(.text.w25q128_dual_read) referenced from norflash_w25q128.o(.rodata.norflash_w25q128_dual)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[99]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(.text)
</UL>
<P><STRONG><a name="[a4]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[a6]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[138]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[139]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[a7]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[13a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[a8]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[eb]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[aa]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[ac]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[ae]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[af]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[b0]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[13b]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[b2]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[b4]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[b5]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[b6]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[b8]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[ba]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[bc]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[bd]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[be]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[c0]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[13c]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[c2]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[c4]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[c6]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[c8]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[13d]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[d4]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[ca]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[13e]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[cc]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[13f]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[140]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[141]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[142]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[143]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[ce]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[144]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[145]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[cf]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[146]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[147]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[148]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[149]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[14a]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[14b]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[14c]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[14d]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[14e]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[14f]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[150]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[151]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[152]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[d9]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[153]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[154]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[155]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[156]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[157]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[158]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[159]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[a5]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[15a]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[d1]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d3]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[15b]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[d5]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Boot_JumpToApp &rArr; printf_tx1 &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[15c]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[fb]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[d8]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[15d]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[da]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>ADF1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>CORDIC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DCMIPP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DTS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>GFXMMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>GFXTIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>GPDMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>GPDMA1_Channel10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>GPDMA1_Channel11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>GPDMA1_Channel12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>GPDMA1_Channel13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>GPDMA1_Channel14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>GPDMA1_Channel15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>GPDMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>GPDMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>GPDMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>GPDMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>GPDMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>GPDMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>GPDMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>GPDMA1_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>GPDMA1_Channel9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>GPU2D_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>GPU2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>HASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>HPDMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>HPDMA1_Channel10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>HPDMA1_Channel11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>HPDMA1_Channel12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>HPDMA1_Channel13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>HPDMA1_Channel14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>HPDMA1_Channel15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>HPDMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>HPDMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>HPDMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>HPDMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>HPDMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>HPDMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>HPDMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>HPDMA1_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>HPDMA1_Channel9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>I3C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>I3C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>I3C1_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>ICACHE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>IWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>LPTIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>LPTIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PKA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>PSSI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RAMECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SAI1_A_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SAI1_B_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SAI2_A_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SAI2_B_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>UCPD1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>WAKEUP_PIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>XSPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>XSPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[fa]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_stm32h7r7xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[dc]"></a>vsnprintf</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_tx1
</UL>

<P><STRONG><a name="[131]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_tx1
</UL>

<P><STRONG><a name="[118]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_MspInit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q128_dual_memory_mapped
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q128_dual_program_page
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q128_dual_erase_sector
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q128_dual_erase_block
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q128_dual_erase_chip
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q128_dual_init
</UL>

<P><STRONG><a name="[15e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[e0]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[e1]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[e2]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[de]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[b3]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[a9]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[dd]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[9a]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[e5]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[bb]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[e8]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[b7]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[bf]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[e9]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[b9]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[c1]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[ab]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[e4]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[e7]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[e3]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[f1]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[f4]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[f5]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[c3]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[c5]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[f6]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[c7]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[c9]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[f7]"></a>_c16rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[e6]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[d2]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[f8]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
</UL>

<P><STRONG><a name="[cd]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[f3]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[ed]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d7]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[164]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[165]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7m_pel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[db]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[166]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>Boot_JumpToApp</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, xspi_boot.o(.text.Boot_JumpToApp))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = Boot_JumpToApp &rArr; printf_tx1 &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_DeInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_tx1
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7rsxx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7rsxx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[106]"></a>Error_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[117]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, stm32h7rsxx_hal_gpio.o(.text.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_MspDeInit
</UL>

<P><STRONG><a name="[119]"></a>HAL_GPIO_Init</STRONG> (Thumb, 418 bytes, Stack size 48 bytes, stm32h7rsxx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_MspInit
</UL>

<P><STRONG><a name="[108]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7rsxx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_DeInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_Config
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_MemoryMapped
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_AutoPolling
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_Receive
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_Transmit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_Command
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_Init
</UL>

<P><STRONG><a name="[125]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7rsxx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ff]"></a>HAL_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32h7rsxx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>HAL_InitTick</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32h7rsxx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_DeInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[128]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32h7rsxx_hal_cortex.o(.text.HAL_MPU_ConfigRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[127]"></a>HAL_MPU_Disable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7rsxx_hal_cortex.o(.text.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[129]"></a>HAL_MPU_Enable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32h7rsxx_hal_cortex.o(.text.HAL_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[102]"></a>HAL_MspInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32h7rsxx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_PWREx_ConfigSupply
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableXSPIM1
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[104]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32h7rsxx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[100]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7rsxx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[105]"></a>HAL_PWREx_ConfigSupply</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32h7rsxx_hal_pwr_ex.o(.text.HAL_PWREx_ConfigSupply))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWREx_ConfigSupply
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[109]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32h7rsxx_hal_pwr_ex.o(.text.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWREx_ControlVoltageScaling
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[107]"></a>HAL_PWREx_EnableXSPIM1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7rsxx_hal_pwr_ex.o(.text.HAL_PWREx_EnableXSPIM1))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[10a]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 2944 bytes, Stack size 24 bytes, stm32h7rsxx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_MspInit
</UL>

<P><STRONG><a name="[10b]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 584 bytes, Stack size 32 bytes, stm32h7rsxx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[fe]"></a>HAL_RCC_DeInit</STRONG> (Thumb, 514 bytes, Stack size 24 bytes, stm32h7rsxx_hal_rcc.o(.text.HAL_RCC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_DeInit &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_JumpToApp
</UL>

<P><STRONG><a name="[10c]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 292 bytes, Stack size 8 bytes, stm32h7rsxx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_DeInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[10d]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1256 bytes, Stack size 40 bytes, stm32h7rsxx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCC_OscConfig &rArr; RCC_PLL_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_Config
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[103]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32h7rsxx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[130]"></a>HAL_XSPIM_Config</STRONG> (Thumb, 282 bytes, Stack size 28 bytes, stm32h7rsxx_hal_xspi.o(.text.HAL_XSPIM_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_XSPIM_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_init
</UL>

<P><STRONG><a name="[10f]"></a>HAL_XSPI_AutoPolling</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, stm32h7rsxx_hal_xspi.o(.text.HAL_XSPI_AutoPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_XSPI_AutoPolling
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q128_dual_memory_mapped
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q128_dual_program_page
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q128_dual_erase_sector
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q128_dual_erase_block
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q128_dual_erase_chip
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q128_dual_init
</UL>

<P><STRONG><a name="[110]"></a>HAL_XSPI_Command</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, stm32h7rsxx_hal_xspi.o(.text.HAL_XSPI_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_XSPI_Command &rArr; XSPI_ConfigCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSPI_ConfigCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_read
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q128_dual_memory_mapped
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q128_dual_read
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q128_dual_program_page
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q128_dual_erase_sector
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q128_dual_erase_block
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q128_dual_erase_chip
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q128_dual_init
</UL>

<P><STRONG><a name="[112]"></a>HAL_XSPI_DeInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32h7rsxx_hal_xspi.o(.text.HAL_XSPI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_XSPI_DeInit &rArr; HAL_XSPI_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_init
</UL>

<P><STRONG><a name="[114]"></a>HAL_XSPI_Init</STRONG> (Thumb, 402 bytes, Stack size 24 bytes, stm32h7rsxx_hal_xspi.o(.text.HAL_XSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = HAL_XSPI_Init &rArr; HAL_XSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_init
</UL>

<P><STRONG><a name="[116]"></a>HAL_XSPI_MemoryMapped</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, stm32h7rsxx_hal_xspi.o(.text.HAL_XSPI_MemoryMapped))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_XSPI_MemoryMapped
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q128_dual_memory_mapped
</UL>

<P><STRONG><a name="[113]"></a>HAL_XSPI_MspDeInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, norflash_w25q128.o(.text.HAL_XSPI_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_XSPI_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_DeInit
</UL>

<P><STRONG><a name="[115]"></a>HAL_XSPI_MspInit</STRONG> (Thumb, 190 bytes, Stack size 184 bytes, norflash_w25q128.o(.text.HAL_XSPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = HAL_XSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_Init
</UL>

<P><STRONG><a name="[11a]"></a>HAL_XSPI_Receive</STRONG> (Thumb, 414 bytes, Stack size 24 bytes, stm32h7rsxx_hal_xspi.o(.text.HAL_XSPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_XSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_read
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q128_dual_read
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q128_dual_init
</UL>

<P><STRONG><a name="[11b]"></a>HAL_XSPI_Transmit</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, stm32h7rsxx_hal_xspi.o(.text.HAL_XSPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_XSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q128_dual_program_page
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q128_dual_init
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7rsxx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[123]"></a>LL_GPIO_Init</STRONG> (Thumb, 234 bytes, Stack size 36 bytes, stm32h7rsxx_ll_gpio.o(.text.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[11f]"></a>LL_RCC_GetPLL1ClockFreq</STRONG> (Thumb, 524 bytes, Stack size 8 bytes, stm32h7rsxx_ll_rcc.o(.text.LL_RCC_GetPLL1ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RCC_GetPLL1ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUARTClockFreq
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[11d]"></a>LL_RCC_GetPLL2ClockFreq</STRONG> (Thumb, 612 bytes, Stack size 8 bytes, stm32h7rsxx_ll_rcc.o(.text.LL_RCC_GetPLL2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RCC_GetPLL2ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUARTClockFreq
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[11e]"></a>LL_RCC_GetPLL3ClockFreq</STRONG> (Thumb, 500 bytes, Stack size 8 bytes, stm32h7rsxx_ll_rcc.o(.text.LL_RCC_GetPLL3ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RCC_GetPLL3ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUARTClockFreq
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[11c]"></a>LL_RCC_GetUARTClockFreq</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, stm32h7rsxx_ll_rcc.o(.text.LL_RCC_GetUARTClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_RCC_GetUARTClockFreq &rArr; LL_RCC_GetPLL3ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetPLL3ClockFreq
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetPLL2ClockFreq
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetPLL1ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[120]"></a>LL_RCC_GetUSARTClockFreq</STRONG> (Thumb, 560 bytes, Stack size 32 bytes, stm32h7rsxx_ll_rcc.o(.text.LL_RCC_GetUSARTClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_RCC_GetUSARTClockFreq &rArr; LL_RCC_GetPLL3ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetPLL3ClockFreq
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetPLL2ClockFreq
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetPLL1ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[121]"></a>LL_USART_Init</STRONG> (Thumb, 308 bytes, Stack size 16 bytes, stm32h7rsxx_ll_usart.o(.text.LL_USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LL_USART_Init &rArr; LL_RCC_GetUARTClockFreq &rArr; LL_RCC_GetPLL3ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUARTClockFreq
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[12d]"></a>LL_mDelay</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, stm32h7rsxx_ll_utils.o(.text.LL_mDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q128_dual_init
</UL>

<P><STRONG><a name="[122]"></a>MX_GPIO_Init</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MX_GPIO_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[124]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 318 bytes, Stack size 208 bytes, usart.o(.text.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = MX_USART1_UART_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUARTClockFreq &rArr; LL_RCC_GetPLL3ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7rsxx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7rsxx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7rsxx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7rsxx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7rsxx_it.o(.text.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[126]"></a>SystemClock_Config</STRONG> (Thumb, 176 bytes, Stack size 208 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; RCC_PLL_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>SystemInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, system_stm32h7rsxx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7rsxx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7r7xx.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>main</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = main &rArr; Boot_JumpToApp &rArr; printf_tx1 &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_JumpToApp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_memory_mapped
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_read
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_write
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_get_chip_size
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_tx1
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_ConfigRegion
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[12b]"></a>norflash_get_chip_size</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, norflash_w25q128.o(.text.norflash_get_chip_size))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12a]"></a>norflash_init</STRONG> (Thumb, 510 bytes, Stack size 32 bytes, norflash_w25q128.o(.text.norflash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = norflash_init &rArr; HAL_XSPI_Init &rArr; HAL_XSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q128_dual_init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPIM_Config
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_DeInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12f]"></a>norflash_memory_mapped</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, norflash_w25q128.o(.text.norflash_memory_mapped))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = norflash_memory_mapped &rArr; w25q128_dual_memory_mapped &rArr; HAL_XSPI_Command &rArr; XSPI_ConfigCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q128_dual_memory_mapped
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12e]"></a>norflash_read</STRONG> (Thumb, 284 bytes, Stack size 112 bytes, norflash_w25q128.o(.text.norflash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = norflash_read &rArr; HAL_XSPI_Command &rArr; XSPI_ConfigCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_Receive
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_write
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12c]"></a>norflash_write</STRONG> (Thumb, 1224 bytes, Stack size 48 bytes, norflash_w25q128.o(.text.norflash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = norflash_write &rArr; w25q128_dual_program_page &rArr; HAL_XSPI_Command &rArr; XSPI_ConfigCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_read
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q128_dual_program_page
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q128_dual_erase_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>printf_tx1</STRONG> (Thumb, 114 bytes, Stack size 240 bytes, usart.o(.text.printf_tx1))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = printf_tx1 &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_JumpToApp
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ee]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[133]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[132]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[134]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[135]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[ef]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f0]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[136]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[f2]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[ea]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[d0]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[9c]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[cb]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[169]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[16a]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[ad]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[b1]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[10e]"></a>RCC_PLL_Config</STRONG> (Thumb, 524 bytes, Stack size 48 bytes, stm32h7rsxx_hal_rcc.o(.text.RCC_PLL_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RCC_PLL_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[111]"></a>XSPI_ConfigCmd</STRONG> (Thumb, 510 bytes, Stack size 20 bytes, stm32h7rsxx_hal_xspi.o(.text.XSPI_ConfigCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = XSPI_ConfigCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_Command
</UL>

<P><STRONG><a name="[9d]"></a>w25q128_dual_init</STRONG> (Thumb, 750 bytes, Stack size 120 bytes, norflash_w25q128.o(.text.w25q128_dual_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = w25q128_dual_init &rArr; HAL_XSPI_Command &rArr; XSPI_ConfigCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_AutoPolling
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_Receive
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_Transmit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> norflash_w25q128.o(.rodata.norflash_w25q128_dual)
</UL>
<P><STRONG><a name="[9e]"></a>w25q128_dual_erase_chip</STRONG> (Thumb, 318 bytes, Stack size 112 bytes, norflash_w25q128.o(.text.w25q128_dual_erase_chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = w25q128_dual_erase_chip &rArr; HAL_XSPI_Command &rArr; XSPI_ConfigCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_AutoPolling
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_Command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> norflash_w25q128.o(.rodata.norflash_w25q128_dual)
</UL>
<P><STRONG><a name="[9f]"></a>w25q128_dual_erase_block</STRONG> (Thumb, 332 bytes, Stack size 120 bytes, norflash_w25q128.o(.text.w25q128_dual_erase_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = w25q128_dual_erase_block &rArr; HAL_XSPI_Command &rArr; XSPI_ConfigCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_AutoPolling
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_Command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> norflash_w25q128.o(.rodata.norflash_w25q128_dual)
</UL>
<P><STRONG><a name="[a0]"></a>w25q128_dual_erase_sector</STRONG> (Thumb, 332 bytes, Stack size 120 bytes, norflash_w25q128.o(.text.w25q128_dual_erase_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = w25q128_dual_erase_sector &rArr; HAL_XSPI_Command &rArr; XSPI_ConfigCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_AutoPolling
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> norflash_w25q128.o(.rodata.norflash_w25q128_dual)
</UL>
<P><STRONG><a name="[a1]"></a>w25q128_dual_program_page</STRONG> (Thumb, 378 bytes, Stack size 128 bytes, norflash_w25q128.o(.text.w25q128_dual_program_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = w25q128_dual_program_page &rArr; HAL_XSPI_Command &rArr; XSPI_ConfigCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_AutoPolling
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_Transmit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> norflash_w25q128.o(.rodata.norflash_w25q128_dual)
</UL>
<P><STRONG><a name="[a2]"></a>w25q128_dual_read</STRONG> (Thumb, 114 bytes, Stack size 96 bytes, norflash_w25q128.o(.text.w25q128_dual_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = w25q128_dual_read &rArr; HAL_XSPI_Command &rArr; XSPI_ConfigCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_Receive
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_Command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> norflash_w25q128.o(.rodata.norflash_w25q128_dual)
</UL>
<P><STRONG><a name="[a3]"></a>w25q128_dual_memory_mapped</STRONG> (Thumb, 328 bytes, Stack size 128 bytes, norflash_w25q128.o(.text.w25q128_dual_memory_mapped))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = w25q128_dual_memory_mapped &rArr; HAL_XSPI_Command &rArr; XSPI_ConfigCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_MemoryMapped
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_AutoPolling
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_XSPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norflash_memory_mapped
</UL>
<BR>[Address Reference Count : 1]<UL><LI> norflash_w25q128.o(.rodata.norflash_w25q128_dual)
</UL>
<P><STRONG><a name="[9b]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[ec]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
